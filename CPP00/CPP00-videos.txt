CPP00 (25-11-2020)

HEADER: 
	ne pas y déclarer de fonction
	protecc header

OUTPUT:
	sur stdout
	finir par \n sauf précision

FONCTIONS INTERDITES
	*printf/*alloc/free
	pas de STL (Vector/List/Map/..)
	pas de using namespace ou friend

LIBRAIRIES INTERDITES
	C++11
	Boost

FICHIERS DE CLASSE
	nommés ClassName.cpp et ClassName.hpp

VIDEOS A REGARDER
https://elearning.intra.42.fr/tags/38/notions

RESOURCES
cplusplus.com
https://www.w3schools.com/cpp/

------------------------------------------------------
VIDEOS 
https://elearning.intra.42.fr/notions/piscine-c-d00-c-basics/subnotions

:: est un opérateur de résolution de portée (chercher nom indien)

Un namespace regroupe des variables/fonctions qui ont un rapport sémantique entre elles.
Chaque variable ou fonction d'un namespace est considéré comme différente d'autres du même nom dans d'autres namespaces ou en globales/déclarées sans namespace. Pas de conflit.

var_globale et ::var_globale sont la même chose

namespace Foo {
public:
	int var = 6;
	int f(void *){return 7;}
}

namespace Bar {
public:
	int var = 8;
	int f(void *){return 9;}
}

namespace Muf = Bar;

Foo::var vaudra 6
Foo::f() vaudra 7
Bar::var et Muf::var vaudront 8
Bar::f() et Muf::f() vaudront 9

---------------------------------------------------

std::cin = stdin
std::cout = stdout

<< et >> : opérateurs de redirection dans les sorties

char buff[512];
std::cout << "Write smth here" << std::endl;
std::cin >> buff;
std::cout << "You entered" << buff << std::endl;

cplusplus.com

---------------------------------------------------

Fichier de déclaration de classe : Nomdeclasse.class.hpp
Fichier de définition de classe : Nomdeclasse.class.cpp

Ne pas oublier ifndef define endif dans le hpp

class Sample {//on crée une classe qu'on nomme Sample
public:
	Sample(void); //constructeur, appelé a l'instanciation
	~Sample(void); //destructeur, appelé a la destruction de l'instance, a la fin du prog
};

Si dans mon main je déclare une instace de classe
int main() {
	Sample instance;//appelle Sample::Sample(void)
	return 0;//appelle Sample::~Sample(void)
}

Classe = moule a gâteau
Instances = gâteaux, déclarations de classes

-------------------------------------------------------

Attributs membres: choses qu'on met dans la classe, variables, fonctions membres.

Dans le Classname.class.hpp :

class Classname {

public:
	int foo;
	Classname( void)
	~Classname(void);
	int bar(void);
};

Dans le Classname.class.cpp :

Classname::Classname (void) {
std::cout << "created instance of classname" << std::endl
return;
};

Classname::~Classname (void) {
std::cout << "destroyed instance of classname" << std::endl
return;
};

void Classname:: bar (void) {
std::cout << "called Classname function bar" << std::endl
return;
};

Dans le main:
Int main () {
Classname instance;
instance.foo = 42;
instance.bar();
return 0;
};

------------------------------------------------------

Si dans Classname j'ai int a; a est un attribut de Classname

Dans le constructeur (utilisé à l'instanciation de la classe), on initialise les variables. On peut les appeler avec this->  dans n'importe quelle fonction membre de la classe.

Classname::Classname(void){
std::cout << "Constructor called" << std::endl;
this->foo = 42;
this->bar();
};

(this est un pointeur, d'ou le ->)

-------------------------------------------------------

Le constructeur peut prendre des parametres:

class Classname {

public:
	char a1;
	int a2;
	float a3;
	Classname(char p1, int p2, float p3);
	~Classname(void);
};

On initialise a1, a2 et a3 avec une liste d'initialisation grace au constructeur:

Classname::Classname(char p1, int p2, float p3) : a1(p1), a2(p2), a3(p3) {
std::cout << "Constructor called" << std::endl;
std::cout << "this->a1 =" << this->a1 << std::endl;
std::cout << "this->a2 =" << this->a2 << std::endl;
std::cout << "this->a3 =" << this->a3 << std::endl;
}

On l'appelera dans le main en initialisant l'instance comme suit:
Classname instance1( 'a', 42, 4.2f);

-------------------------------------------------------

/!\ ESSAYER DE TRAVAILLER AVEC UN MAX DE CONSTANTES

class Sample {

public:
	float const pi;
	int 	qd;

	Sample(float const f);
	~Sample(void):

	void bar(void)const;//signifie que jamais cette fonction ne modifiera l'instance courante de la classe. Si dans Sample::bar j'essaye d'assigner this->qd, ça ne compilera pas.
};

Sample::Sample(float const f): pi(f), qd(42) {
	std::cout << "pi initialised. pi =" << this->pi << std::endl;
	std::cout << "qd initialised. qd =" << this->qd << std::endl;
}

j'ai initialisé une constante !

-------------------------------------------------------

public : 
éléments visibles de partout depuis l'extérieur
private :
éléments visibles seulement depuis l'intérieur de la classe

class Sample {
	
	public:

	int publicFoo;

	Sample(void);
	~Sample(void);

	void publicBar(void) const;

private:
	int _privateFoo;
	void _privateBar(void) const;
};

//on préfixe les identifiants privés d'un underscore par convention
On pourra atteindre this->_privateFoo et this->_privateBar depuis mon constructeur ou les fonctions de ma classe. Si je les appelle depuis un main par exemple, ça ne marchera pas

/!\ n'exposer que ce qui est nécessaire de partager a l'utilisateur

-------------------------------------------------------

en CPP, struct et class son presque la même chose: déclarées pareil..
mais dans une struct, pas forcément de distinction public/private
DANS UNE STRUCT : par défaut si non précisé, public
DANS UNE CLASSE : par défaut si non précisé, private

/!\ DONC TOUJOURS UTILISER DE PREFERENCE DES CLASSES

-------------------------------------------------------

class Sample {
	
public:
	
	Sample(void);
	~Sample(void);

	int getFoo(void) const;
	void setFoo(int v);

private:

	int _foo;
};

getFoo et setFoo sont des accesseurs, getFoo en lecture et setFoo en écriture. On les nomme setter ou des getter.

Sample::~Sample(void) {
	std::cout << "destructor called" << std::endl;
	return;
}

int Sample::getFoo(void) const {
	return this->_foo;
}

void Sample::setFoo(int v) {
	if (v >= 0)
		this->foo = v;
	else
		std::cout << "couldn't set v" << std::endl;
};

-------------------------------------------------------

COMPARAISEONS ENTRE 2 STRUCTURES

dans .hpp

class Sample {
	
public:
	
	Sample(int v);
	~Sample(void);

	int	getFoo(void) const;
	int	compare(Sample *other) const;

private:

	int _foo;

};

dans .cpp

int Sample::getFoo(void)const {
	return this->_foo;
}

int Sample::compare(Sample *other) const {
	if (this->_foo < other->getFoo())
		return -1;
	else if (this->_foo > other->getFoo())
		return 1;

	return 0;
}

/!\ si on compare 2 instances avec ==, on compare leurs adresses, pas leur structure/contenu

-------------------------------------------------------

FONCTIONS ET ATTRIBUTS NON-MEMBRES (ou variables/fonctions d'instance vs variables/fonctions de classe)

Fonction/attribut membre : qqch qui existe au sein d'une classe instanciée. 

class Sample {
	
public:
	
	Sample(int v);
	~Sample(void);

	static int	getnbInst(void) const;

private:

	static int _nbInst;

};


this n'est pas communiqué à une fonction non membre. On refere directement a la classe. Le param non membre ne sera pas modifié par les instances, il dépendra seulement de la classe
int Static::getnbInst(void){
	return Sample::nbInst; 
}

on initialise l'attribut non membre dans le cpp:
int Sample::nbInst = 0;

-------------------------------------------------------
POINTEURS SUR ATTRIBUTS MEMBRES OU FONCTIONS MEMBRES

int main(){
	
	Sample instance;
	Sample *instancep = &instance;

	int Sample::*p = NULL;
	void (Sample::*f)(void)const;

	p = &Sample::foo;
	instance.*p = 21;
	instancep->*p = 42;

	f = &Sample::bar;

	(instance.*f)();
	(instancep->*f)();

}